"use strict";(self.webpackChunkrust_book_abridged=self.webpackChunkrust_book_abridged||[]).push([[607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},i="Appendix D - Useful Development Tools",l={unversionedId:"zz-appendix/appendix-04-useful-development-tools",id:"zz-appendix/appendix-04-useful-development-tools",title:"Appendix D - Useful Development Tools",description:'This appendix was copied directly from "The Rust Programming Language".',source:"@site/docs/zz-appendix/appendix-04-useful-development-tools.md",sourceDirName:"zz-appendix",slug:"/zz-appendix/appendix-04-useful-development-tools",permalink:"/rust-book-abridged/zz-appendix/appendix-04-useful-development-tools",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/zz-appendix/appendix-04-useful-development-tools.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Appendix C: Derivable Traits",permalink:"/rust-book-abridged/zz-appendix/appendix-03-derivable-traits"},next:{title:"Appendix E - Editions",permalink:"/rust-book-abridged/zz-appendix/appendix-05-editions"}},s={},p=[{value:"Automatic Formatting with <code>rustfmt</code>",id:"automatic-formatting-with-rustfmt",level:2},{value:"Fix Your Code with <code>rustfix</code>",id:"fix-your-code-with-rustfix",level:2},{value:"More Lints with Clippy",id:"more-lints-with-clippy",level:2},{value:"IDE Integration Using <code>rust-analyzer</code>",id:"ide-integration-using-rust-analyzer",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"appendix-d---useful-development-tools"},"Appendix D - Useful Development Tools"),(0,r.kt)("p",null,"This appendix was copied directly from ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/book/appendix-04-useful-development-tools.html"},'"The Rust Programming Language"'),"."),(0,r.kt)("p",null,"In this appendix, we talk about some useful development tools that the Rust\nproject provides. We'll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs."),(0,r.kt)("h2",{id:"automatic-formatting-with-rustfmt"},"Automatic Formatting with ",(0,r.kt)("inlineCode",{parentName:"h2"},"rustfmt")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt")," tool reformats your code according to the community code style.\nMany collaborative projects use ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt")," to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool."),(0,r.kt)("p",null,"To install ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt"),", enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ rustup component add rustfmt\n")),(0,r.kt)("p",null,"This command gives you ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo-fmt"),", similar to how Rust gives you\nboth ",(0,r.kt)("inlineCode",{parentName:"p"},"rustc")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo"),". To format any Cargo project, enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo fmt\n")),(0,r.kt)("p",null,"Running this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfmt"),", see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rustfmt"},"its documentation"),"."),(0,r.kt)("h2",{id:"fix-your-code-with-rustfix"},"Fix Your Code with ",(0,r.kt)("inlineCode",{parentName:"h2"},"rustfix")),(0,r.kt)("p",null,"The rustfix tool is included with Rust installations and can automatically fix\ncompiler warnings that have a clear way to correct the problem that's likely\nwhat you want. It's likely you've seen compiler warnings before. For example,\nconsider this code:"),(0,r.kt)("span",{class:"filename"},"Filename: src/main.rs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn do_something() {}\n\nfn main() {\n    for i in 0..100 {\n        do_something();\n    }\n}\n")),(0,r.kt)("p",null,"Here, we're calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"do_something")," function 100 times, but we never use the\nvariable ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," in the body of the ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop. Rust warns us about that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n --\x3e src/main.rs:4:9\n  |\n4 |     for i in 0..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n")),(0,r.kt)("p",null,"The warning suggests that we use ",(0,r.kt)("inlineCode",{parentName:"p"},"_i")," as a name instead: the underscore\nindicates that we intend for this variable to be unused. We can automatically\napply that suggestion using the ",(0,r.kt)("inlineCode",{parentName:"p"},"rustfix")," tool by running the command ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo\nfix"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n")),(0,r.kt)("p",null,"When we look at ",(0,r.kt)("em",{parentName:"p"},"src/main.rs")," again, we'll see that ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo fix")," has changed the\ncode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"fn do_something() {}\n\nfn main() {\n    for _i in 0..100 {\n        do_something();\n    }\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop variable is now named ",(0,r.kt)("inlineCode",{parentName:"p"},"_i"),", and the warning no longer appears."),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo fix")," command to transition your code between\ndifferent Rust editions. Editions are covered in Appendix E."),(0,r.kt)("h2",{id:"more-lints-with-clippy"},"More Lints with Clippy"),(0,r.kt)("p",null,"The Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code."),(0,r.kt)("p",null,"To install Clippy, enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ rustup component add clippy\n")),(0,r.kt)("p",null,"To run Clippy's lints on any Cargo project, enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cargo clippy\n")),(0,r.kt)("p",null,"For example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'fn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!("the area of the circle is {}", x * r * r);\n}\n')),(0,r.kt)("p",null,"Running ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo clippy")," on this project results in this error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"error: approximate value of `f{32, 64}::consts::PI` found\n --\x3e src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n")),(0,r.kt)("p",null,"This error lets you know that Rust already has a more precise ",(0,r.kt)("inlineCode",{parentName:"p"},"PI")," constant\ndefined, and that your program would be more correct if you used the constant\ninstead. You would then change your code to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"PI")," constant. The\nfollowing code doesn't result in any errors or warnings from Clippy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'fn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!("the area of the circle is {}", x * r * r);\n}\n')),(0,r.kt)("p",null,"For more information on Clippy, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/rust-clippy"},"its documentation"),"."),(0,r.kt)("h2",{id:"ide-integration-using-rust-analyzer"},"IDE Integration Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"rust-analyzer")),(0,r.kt)("p",null,"To help IDE integration, the Rust community recommends using\n",(0,r.kt)("a",{parentName:"p",href:"https://rust-analyzer.github.io"},(0,r.kt)("inlineCode",{parentName:"a"},"rust-analyzer")),". This tool is a set of\ncompiler-centric utilities that speaks the ",(0,r.kt)("a",{parentName:"p",href:"http://langserver.org/"},"Language Server Protocol"),", which is a specification for IDEs and programming languages to\ncommunicate with each other. Different clients can use ",(0,r.kt)("inlineCode",{parentName:"p"},"rust-analyzer"),", such as\n",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer"},"the Rust analyzer plug-in for Visual Studio Code"),"."),(0,r.kt)("p",null,"Visit the ",(0,r.kt)("inlineCode",{parentName:"p"},"rust-analyzer")," project's ",(0,r.kt)("a",{parentName:"p",href:"https://rust-analyzer.github.io"},"home page"),"\nfor installation instructions, then install the language server support in your\nparticular IDE. Your IDE will gain abilities such as autocompletion, jump to\ndefinition, and inline errors."))}m.isMDXComponent=!0}}]);