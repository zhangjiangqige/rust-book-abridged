"use strict";(self.webpackChunkrust_book_abridged=self.webpackChunkrust_book_abridged||[]).push([[487],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=a,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||r;return n?i.createElement(k,l(l({ref:t},d),{},{components:n})):i.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5239:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={},l="Appendix A: Keywords",o={unversionedId:"zz-appendix/appendix-01-keywords",id:"zz-appendix/appendix-01-keywords",title:"Appendix A: Keywords",description:'This appendix was copied directly from "The Rust Programming Language".',source:"@site/docs/zz-appendix/appendix-01-keywords.md",sourceDirName:"zz-appendix",slug:"/zz-appendix/appendix-01-keywords",permalink:"/rust-book-abridged/zz-appendix/appendix-01-keywords",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/zz-appendix/appendix-01-keywords.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Appendix",permalink:"/rust-book-abridged/category/appendix"},next:{title:"Appendix B: Operators and Symbols",permalink:"/rust-book-abridged/zz-appendix/appendix-02-operators"}},p={},s=[{value:"Keywords Currently in Use",id:"keywords-currently-in-use",level:2},{value:"Keywords Reserved for Future Use",id:"keywords-reserved-for-future-use",level:2},{value:"Raw Identifiers",id:"raw-identifiers",level:3}],d={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"appendix-a-keywords"},"Appendix A: Keywords"),(0,a.kt)("p",null,"This appendix was copied directly from ",(0,a.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/book/appendix-01-keywords.html"},'"The Rust Programming Language"'),"."),(0,a.kt)("p",null,"The following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we\u2019ll discuss in the \u201c",(0,a.kt)("a",{parentName:"p",href:"#raw-identifiers"},"Raw\nIdentifiers"),"\u201d section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes."),(0,a.kt)("h2",{id:"keywords-currently-in-use"},"Keywords Currently in Use"),(0,a.kt)("p",null,"The following is a list of keywords currently in use, with their functionality\ndescribed."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"as")," - perform primitive casting, disambiguate the specific trait containing\nan item, or rename items in ",(0,a.kt)("inlineCode",{parentName:"li"},"use")," statements"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"async")," -  return a ",(0,a.kt)("inlineCode",{parentName:"li"},"Future")," instead of blocking the current thread"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"await")," - suspend execution until the result of a ",(0,a.kt)("inlineCode",{parentName:"li"},"Future")," is ready"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"break")," - exit a loop immediately"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"const")," - define constant items or constant raw pointers"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"continue")," - continue to the next loop iteration"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"crate")," - in a module path, refers to the crate root"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dyn")," - dynamic dispatch to a trait object"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"else")," - fallback for ",(0,a.kt)("inlineCode",{parentName:"li"},"if")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"if let")," control flow constructs"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"enum")," - define an enumeration"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"extern")," - link an external function or variable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"false")," - Boolean false literal"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fn")," - define a function or the function pointer type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"for")," - loop over items from an iterator, implement a trait, or specify a\nhigher-ranked lifetime"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"if")," - branch based on the result of a conditional expression"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"impl")," - implement inherent or trait functionality"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"in")," - part of ",(0,a.kt)("inlineCode",{parentName:"li"},"for")," loop syntax"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"let")," - bind a variable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loop")," - loop unconditionally"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"match")," - match a value to patterns"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mod")," - define a module"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"move")," - make a closure take ownership of all its captures"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mut")," - denote mutability in references, raw pointers, or pattern bindings"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pub")," - denote public visibility in struct fields, ",(0,a.kt)("inlineCode",{parentName:"li"},"impl")," blocks, or modules"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ref")," - bind by reference"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"return")," - return from function"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Self")," - a type alias for the type we are defining or implementing"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"self")," - method subject or current module"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"static")," - global variable or lifetime lasting the entire program execution"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"struct")," - define a structure"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"super")," - parent module of the current module"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"trait")," - define a trait"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"true")," - Boolean true literal"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type")," - define a type alias or associated type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"union")," - define a ",(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/stable/reference/items/unions.html"},"union"),"; is only a keyword when used\nin a union declaration"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"unsafe")," - denote unsafe code, functions, traits, or implementations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"use")," - bring symbols into scope"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"where")," - denote clauses that constrain a type"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"while")," - loop conditionally based on the result of an expression")),(0,a.kt)("h2",{id:"keywords-reserved-for-future-use"},"Keywords Reserved for Future Use"),(0,a.kt)("p",null,"The following keywords do not yet have any functionality but are reserved by\nRust for potential future use."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"abstract")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"become")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"box")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"do")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"final")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"macro")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"override")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"priv")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"try")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"typeof")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"unsized")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"virtual")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"yield"))),(0,a.kt)("h3",{id:"raw-identifiers"},"Raw Identifiers"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Raw identifiers")," are the syntax that lets you use keywords where they wouldn\u2019t\nnormally be allowed. You use a raw identifier by prefixing a keyword with ",(0,a.kt)("inlineCode",{parentName:"p"},"r#"),"."),(0,a.kt)("p",null,"For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," is a keyword. If you try to compile the following function\nthat uses ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," as its name:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"fn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n")),(0,a.kt)("p",null,"you'll get this error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"error: expected identifier, found keyword `match`\n --\x3e src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n")),(0,a.kt)("p",null,"The error shows that you can\u2019t use the keyword ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," as the function\nidentifier. To use ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," as a function name, you need to use the raw\nidentifier syntax, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'fn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match("foo", "foobar"));\n}\n')),(0,a.kt)("p",null,"This code will compile without any errors. Note the ",(0,a.kt)("inlineCode",{parentName:"p"},"r#")," prefix on the function\nname in its definition as well as where the function is called in ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,a.kt)("p",null,"Raw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to\nchoose identifier names, as well as lets us integrate with programs written in\na language where these words aren\u2019t keywords. In addition, raw identifiers\nallow you to use libraries written in a different Rust edition than your crate\nuses. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," isn\u2019t a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that\u2019s written using the 2015 edition and\nhas a ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," function, you\u2019ll need to use the raw identifier syntax, ",(0,a.kt)("inlineCode",{parentName:"p"},"r#try")," in\nthis case, to call that function from your 2018 edition code. See ",(0,a.kt)("a",{parentName:"p",href:"/rust-book-abridged/zz-appendix/appendix-05-editions"},"Appendix\nE")," for more information on editions."))}m.isMDXComponent=!0}}]);