"use strict";(self.webpackChunkrust_book_abridged=self.webpackChunkrust_book_abridged||[]).push([[932],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=r,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return t?a.createElement(m,i(i({ref:n},l),{},{components:t})):a.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const o={},i="19.4 - Advanced Functions and Closures",s={unversionedId:"ch19/ch19-04-advanced-functions-and-closures",id:"ch19/ch19-04-advanced-functions-and-closures",title:"19.4 - Advanced Functions and Closures",description:"Function Pointers",source:"@site/docs/ch19/ch19-04-advanced-functions-and-closures.md",sourceDirName:"ch19",slug:"/ch19/ch19-04-advanced-functions-and-closures",permalink:"/rust-book-abridged/ch19/ch19-04-advanced-functions-and-closures",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ch19/ch19-04-advanced-functions-and-closures.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"19.3 - Advanced Types",permalink:"/rust-book-abridged/ch19/ch19-03-advanced-types"},next:{title:"19.5 - Macros",permalink:"/rust-book-abridged/ch19/ch19-05-macros"}},c={},u=[{value:"Function Pointers",id:"function-pointers",level:2},{value:"Passing Functions In Place of a Closure",id:"passing-functions-in-place-of-a-closure",level:2},{value:"Returning Closures",id:"returning-closures",level:2}],l={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"194---advanced-functions-and-closures"},"19.4 - Advanced Functions and Closures"),(0,r.kt)("h2",{id:"function-pointers"},"Function Pointers"),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"/rust-book-abridged/ch13-functional-language-features",title:"Chapter 13: Functional Language Features: Iterators and Closures"},"chapter 13")," we saw you could pass a closure to a function, but we can also pass a function to a function!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n// Note that this takes a function pointer as\n// a parameter, and not a closure.\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!("The answer is: {}", answer);\n}\n')),(0,r.kt)("p",null,"The first parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"do_twice")," is called a ",(0,r.kt)("em",{parentName:"p"},"function pointer"),". You may recall ",(0,r.kt)("a",{parentName:"p",href:"/rust-book-abridged/ch13-functional-language-features",title:"Chapter 13: Functional Language Features: Iterators and Closures"},"from chapter 13")," that in order to pass a closure as a parameter, we declared a generic function and used a trait bound on the generic type to ",(0,r.kt)("inlineCode",{parentName:"p"},"FnOnce"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FnMut"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"Fn"),". The difference between a closure and a function pointer is the function pointer is a named concrete type instead of a generic trait bound.  (Technically any given closure has a concrete type as well, generated at compile time, but these are unnameable types.)"),(0,r.kt)("p",null,"Because a function is like a closure that cannot capture any variables, function pointers implement all three generic traits (",(0,r.kt)("inlineCode",{parentName:"p"},"FnOnce"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FnMut"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Fn"),") so you can always pass a function pointer to a function that expects a trait. For this reason, it's generally more flexible to write a function that takes a closure. You'll likely have to use a function pointer instead If you're interacting with C code."),(0,r.kt)("h2",{id:"passing-functions-in-place-of-a-closure"},"Passing Functions In Place of a Closure"),(0,r.kt)("p",null,"Here's an example of using a function in place of a closure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let list_of_numbers = vec![1, 2, 3];\nlet list_of_strings: Vec<String> =\n    list_of_numbers.iter().map(|i| i.to_string()).collect();\n\n// This is equivalent to the above:\nlet list_of_strings2: Vec<String> =\n    list_of_numbers.iter().map(ToString::to_string).collect();\n")),(0,r.kt)("p",null,"Each enum variant we define becomes an initializer function, so we can use them as function pointers (as we also could any constructor):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"enum Status {\n    Value(u32),\n    Stop,\n}\n\nlet list_of_statuses: Vec<Status> = (0u32..20).map(Status::Value).collect();\n")),(0,r.kt)("h2",{id:"returning-closures"},"Returning Closures"),(0,r.kt)("p",null,"Since a closure is defined using a trait, if you want to return one from a function you'll have to use a trait object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n")))}d.isMDXComponent=!0}}]);